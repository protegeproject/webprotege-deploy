version: '3'

services:

  rabbitmq:
    image: rabbitmq:management
    restart: "no"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_MANAGEMENT_USER=${RABBITMQ_MANAGEMENT_USER}
      - RABBITMQ_MANAGEMENT_PASS=${RABBITMQ_MANAGEMENT_PASS}
    volumes:
      - ./rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 4G
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elk


  keycloak:
    image: alexsilaghi93/webprotege-keycloak:0.0.1
    command: [ "start-dev" ]
    ports:
      - 8080:8080
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_PROXY=edge
      - KC_LOG_LEVEL=INFO
      - KC_HTTP_RELATIVE_PATH=/keycloak-admin
      - KC_FEATURES=hostname
      - KC_THEME=webprotege
      - KC_THEME_LOGIN=webprotege
    volumes:
      - keycloak-h2-directory:/opt/keycloak/data
      - ./keycloak/webprotege.v2:/opt/keycloak/themes/webprotege.v2
    healthcheck:
      test: ["CMD", "/opt/keycloak/bin/kcadm.sh", "get", "realms/webprotege", "--server", "http://localhost:8080/keycloak-admin", "--realm", "master", "--user", "${KEYCLOAK_ADMIN}", "--password", "${KEYCLOAK_ADMIN_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - elk

  zipkin:
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - elk

  minio:
    image: minio/minio
    command: [ "server", "/data", "--console-address", ":9001" ]
    restart: always
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - elk

  webprotege-gwt-api-gateway:
    image: protegeproject/webprotege-gwt-api-gateway:2.0.9-WHO
    depends_on:
      keycloak:
        condition: service_healthy
      minio:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      zipkin:
        condition: service_started
    ports:
      - '7777:7777'
    environment:
      spring.zipkin.baseUrl: http://zipkin:9411
      LOGGING_LEVEL_ROOT: INFO
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      SPRING_RABBITMQ_PUBLISHER_CONFIRM_TYPE: NONE
      SPRING_RABBITMQ_PUBLISHER_RETURNS: "FALSE"
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      webprotege.minio.bucketName: ${MINIO_BUCKET_NAME}
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      spring.servlet.multipart.max-file-size: ${MAX_FILE_SIZE}
      spring.servlet.multipart.max-request-size: ${MAX_REQUEST_SIZE}
      WEBPROTEGE_ALLOWEDORIGIN: http://${SERVER_HOST}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: ${KEYCLOAK_WEBPROTEGE_URL}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${KEYCLOAK_WEBPROTEGE_URL}
    networks:
      - elk


  webprotege-gwt-ui-server:
    image: protegeproject/webprotege-gwt-ui-server:8.3.35-WHO
    depends_on:
      webprotege-gwt-api-gateway:
        condition: service_started
      keycloak:
        condition: service_healthy
    ports:
      - '5007:5007'
    environment:
      minio.access.key: ${MINIO_ROOT_USER}
      minio.access.secret: ${MINIO_ROOT_PASSWORD}
      minio.endPoint: http://minio:9000
      KEYCLOAK_AUTH_URL: http://${SERVER_HOST}/keycloak-admin/
      webprotege.gwt-api-gateway.endPoint: http://webprotege-gwt-api-gateway:7777
      webprotege.websocketUrl: ${WEBSOCKET_URL}
      webprotege.logoutUrl: http://${SERVER_HOST}/webprotege/logout
      webprotege.logoutRedirectUrl: http://${SERVER_HOST}/webprotege
      webprotege.fileUploadurl: http://${SERVER_HOST}
      webprotege.keycloakLogoutUrl: ${KEYCLOAK_LOGOUT_URL}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
    networks:
      - elk


  webprotege-authorization-service:
    image: protegeproject/webprotege-authorization-service:3.0.14-WHO
    ports:
      - '5010:5010'
    depends_on:
      keycloak:
        condition: service_healthy
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      LOGGING_LEVEL_ROOT: INFO
      spring.zipkin.baseUrl: http://zipkin:9411
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      KEYCLOAK_ISSUER_URL: ${JWK_SET_URI}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - elk

  webprotege-user-management-service:
    image: protegeproject/webprotege-user-management-service:1.0.9-WHO
    ports:
      - '5009:5009'
    depends_on:
      keycloak:
        condition: service_healthy
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      webprotege.keycloak.serverUrl: http://${SERVER_HOST}/keycloak-admin
      webprotege.keycloak.clientSecret: ${ADMIN_CLI_SECRET}
      webprotege.keycloak.clientId: ${KEYCLOAK_CLIENT_ID}
      LOGGING_LEVEL_ROOT: INFO
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - elk

  webprotege-event-history-service:
    image: protegeproject/webprotege-event-history-service:2.0.17-WHO
    ports:
      - '5006:5006'
    depends_on:
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      webprotege.keycloak.serverUrl: http://${SERVER_HOST}/keycloak-admin
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB_CORE_MONGOTEMPLATE: INFO
      LOGGING_LEVEL_ORG_MONGODB_DRIVER: INFO
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - elk

  webprotege-ontology-processing-service:
    image: protegeproject/webprotege-ontology-processing-service:1.0.0
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
      zipkin:
        condition: service_started
    environment:
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      LOGGING_LEVEL_ROOT: INFO
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk


  webprotege-initial-revision-history-service:
    image: protegeproject/webprotege-initial-revision-history-service:1.0.0
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
      zipkin:
        condition: service_started
    environment:
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk

  webprotege-backend-service:
    user: root
    image: protegeproject/webprotege-backend-service:4.2.22-WHO
    ports:
      - "5005:5005"  # For remote debugging
      - "9010:9010"  # For JMX monitoring
    depends_on:
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      spring.zipkin.baseUrl: "http://zipkin:9411"
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: "http://minio:9000"
      webprotege.directories.data: "/srv/webprotege"
      webprotege.directories.backup : "/webprotege/backup"
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      LOGGING_LEVEL_ROOT: INFO
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      JVM_ENV: -Xms12g -Xmx12g -XX:MaxRAMPercentage=70
    volumes:
      - /srv/webprotege:/srv/webprotege
      - /webprotege/backup:/webprotege/backup

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk

  webprotege-linearization-service:
    user: root
    image: protegeproject/webprotege-linearization-service:1.0.29
    ports:
      - '5011:5011'
    depends_on:
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      spring.zipkin.baseUrl: http://zipkin:9411
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      webprotege.directories.data: /srv/webprotege
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
    volumes:
      - webprotege-data-directory:/srv/webprotege
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk

  webprotege-postcoordination-service:
    user: root
    image: protegeproject/webprotege-postcoordination-service:1.0.34
    ports:
      - '5012:5012'
    depends_on:
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      spring.zipkin.baseUrl: http://zipkin:9411
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      webprotege.directories.data: /srv/webprotege
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
    volumes:
      - webprotege-data-directory:/srv/webprotege
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk

  icatx-versioning-service:
    user: root
    image: protegeproject/icatx-versioning-service:0.0.16
    ports:
      - '5013:5013'
      - '7722:7722'
    depends_on:
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      SSH_PRIVATE_KEY: ${SSH_PRIVATE_KEY}
      spring.zipkin.baseUrl: http://zipkin:9411
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      webprotege.directories.data: /srv/webprotege
      webprotege.directories.backup: /webprotege/backup
      webprotege.versioning.jsonFileLocation: /srv/versioning/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${ISSUER_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${ISSUER_URI}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI: ${ISSUER_URI}
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      webprotege.versioning.location: /srv/versioning/
      LOGGER_LEVEL_ROOT: INFO
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      webprotege.keycloak.token-url: ${KEYCLOAK_TOKEN_URL}
      webprotege.keycloak.client-id: ${ICATX_CLIENT_ID}
      webprotege.keycloak.client-secret: ${ICATX_CLIENT_SECRET}
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk
    volumes:
      - /srv/webprotege:/srv/webprotege
      - /webprotege/backup:/webprotege/backup
      - /srv/versioning/:/srv/versioning/

  icatx-api-gateway:
    user: root
    image: protegeproject/icatx-api-gateway:0.0.79
    ports:
      - '5014:5014'
      - '7779:7779'
    depends_on:
      zipkin:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      spring.zipkin.baseUrl: http://zipkin:9411
      webprotege.minio.accessKey: ${MINIO_ROOT_USER}
      webprotege.minio.secretKey: ${MINIO_ROOT_PASSWORD}
      webprotege.minio.endPoint: http://minio:9000
      webprotege.directories.data: /srv/webprotege
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${ISSUER_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${ISSUER_URI}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI: ${ISSUER_URI}
      LOGGER_LEVEL_ROOT: INFO
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      webprotege.rabbit.timeout: ${RABBITMQ_TIMEOUT}
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
    volumes:
      - webprotege-data-directory:/srv/webprotege
      - webprotege-backup-directory:/webprotege/backup
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - elk


  icatx-id-generation-service:
    image: protegeproject/icatx-id-generation-service:0.0.18
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      JDK_JAVA_OPTIONS: --add-opens java.base/sun.net=ALL-UNNAMED
      LOGGING_LEVEL_ROOT: INFO
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${ISSUER_URI}
      spring.security.oauth2.resourceserver.jwt.issuer-uri: ${ISSUER_URI}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${JWK_SET_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI: ${ISSUER_URI}
      SPRING_DATA_MONGODB_URI: "${MONGO_URL}"
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - elk


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elk
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.2
    user: root
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - elk
    depends_on:
      - logstash
    command: ["filebeat", "-e", "--strict.perms=false", "-c", "/usr/share/filebeat/filebeat.yml"]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SAVED_OBJECTS_IMPORT=/usr/share/kibana/dashboards/webprotege-logs.ndjson
      - ELASTICSEARCH_SERVICE_HOST=elasticsearch
      - ELASTICSEARCH_SERVICE_PORT=9200
      - XPACK_SECURITY_ENABLED=false
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
      - SERVER_PUBLICBASEURL=http://${SERVER_HOST}/kibana
      - SERVER_HOST=0.0.0.0
      - SERVER_NAME=kibana
      - SERVER_MAXPAYLOADBYTES=1048576
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./kibana/dashboards:/usr/share/kibana/dashboards
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: protegeproject/webprotege-nginx:1.2.2
    hostname: ${SERVER_HOST}
    ports:
      - 80:80
      - 443:433
    depends_on:
      - webprotege-gwt-ui-server
      - keycloak
    networks:
      - elk

volumes:

  webprotege-data-directory:
  keycloak-h2-directory:
  minio_data:
  webprotege-backup-directory:
  webprotege-versioning-directory:
  elasticsearch-data:

networks:
  elk:
    driver: bridge
    name: elk